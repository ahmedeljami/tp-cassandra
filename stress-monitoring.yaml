#
# Keyspace name and create CQL
#
keyspace: weather
keyspace_definition: |
  CREATE KEYSPACE weather WITH replication = {'class': 'NetworkTopologyStrategy', 'datacenter1': '1'};
#
# Table name and create CQL
#
table: weather_data
table_definition: |
    CREATE TABLE weather_data (
        weather_station_id int,
        year int,
        day_of_year int,
        time timestamp,
        sensor_id int,
        temperature int,
        humidity int,
        PRIMARY KEY ((weather_station_id,year), day_of_year, time, sensor_id)
    ) WITH CLUSTERING ORDER BY (day_of_year DESC, time DESC,sensor_id DESC);

#
# Meta information for generating data
#
columnspec:
  - name: weather_station_id
    size: fixed(2)
    population: uniform(1..600)  # We have about 200 stations
  - name: year
    size: fixed(4)
    population: uniform(1..5) # we track temperatures for only 5 years
  - name: day_of_year
    size: uniform(1..2)
    population: uniform(1..365)
  - name: time
    size: fixed(15)	
  - name: sensor_id
    size: fixed(4)
    population: uniform(100..200)

#
# Specs for insert queries
#
insert:
  partitions: fixed(1)      # 1 partition per batch
  batchtype: UNLOGGED       # use unlogged batches
  select: fixed(10)/10      # no chance of skipping a row when generating inserts

#
# Read queries to run against the schema
#
queries:
   pull-for-rollup:
      cql: select * from weather_data where weather_station_id = ? and year = ?
      fields: samerow             # pick selection values from same row in partition
   get-a-value:
      cql: select * from weather_data where weather_station_id = ? and year = ?
      fields: samerow             # pick selection values from same row in partition